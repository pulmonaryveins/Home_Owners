@page
@model HomeOwners.Areas.Admin.Pages.ReportsModel
@{
    ViewData["Title"] = "Admin Reports";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="~/css/nav.css" asp-append-version="true" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>


<nav class="navbar navbar-expand-lg fixed-top">
    <div class="container">
        <!-- Logo -->
        <a class="navbar-brand" asp-area="Admin" asp-page="/Dashboard">
            <span class="brand-text">ADMIN DASHBOARD</span>
        </a>

        <!-- Mobile Toggle Button -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarNav" aria-controls="navbarNav"
                aria-expanded="false" aria-label="Toggle navigation">
            <i class="bi bi-list text-white"></i>
        </button>

        <!-- Navigation Items -->
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mx-auto">
                <li class="nav-item">
                    <a class="nav-link" asp-area="Admin" asp-page="/Dashboard">
                        Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="Admin" asp-page="/Users">
                        Users
                    </a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Services
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/Services">Manage Services</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/ServiceRequests">Service Request</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/ServicePersonnel">Service Personnel</a></li>
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Facilities
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/Facilities">Manage Facilities</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/BookingRequests">Booking Requests</a></li>
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Announcements
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/Announcement">Manage Announcement</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/Calendar">Manage Events</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/ManageForum">Manage Forum</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/ManagePolls">Manage Polls</a></li>
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Billing
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/Billing">All Invoices</a></li>
                        <li><a class="dropdown-item" asp-area="Admin" asp-page="/Billing">Payment History</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" asp-area="Admin" asp-page="/Reports">
                        Reports
                    </a>
                </li>
            </ul>

            <!-- Profile Menu -->
            <div class="nav-items-right">
                <div class="nav-item dropdown profile-menu">
                    <a class="profile-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="profile-avatar">
                            <i class="bi bi-person-fill"></i>
                        </div>
                    </a>
                    <ul class="dropdown-menu profile-dropdown dropdown-menu-end">
                        <li class="dropdown-header">
                            <div class="user-info">
                                <span class="user-name">@(User.Identity?.Name ?? "Admin")</span>
                                <span class="user-role">Administrator</span>
                            </div>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" asp-area="Admin" asp-page="/Profile">
                                <i class="bi bi-person-gear"></i> Profile Settings
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout"
                                  asp-route-returnUrl="@Url.Page("/Account/Login", new { area = "Identity" })" method="post">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="dropdown-item logout-item">
                                    <i class="bi bi-box-arrow-right"></i> Logout
                                </button>
                            </form>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</nav>

<!-- Dashboard container -->
<div class="container dashboard-container">
    <div class="dashboard-welcome mb-4">
        <h1 class="welcome-title">
            <i class="bi bi-graph-up me-2"></i>
            Reports Dashboard
        </h1>
        <p class="welcome-subtitle">Generate and view system reports with detailed analytics</p>
        <div class="export-actions mt-3">
            <button id="printReportBtn" class="btn btn-outline-secondary">
                <i class="bi bi-printer"></i> Print
            </button>
            <button id="downloadPdfBtn" class="btn btn-primary ms-2">
                <i class="bi bi-file-earmark-pdf"></i> Export PDF
            </button>
        </div>
    </div>

    @if (TempData["StatusMessage"] != null)
    {
        var statusType = TempData["StatusType"]?.ToString() == "Success" ? "success" : "danger";
        <div class="alert alert-@statusType alert-dismissible fade show" role="alert">
            <div class="d-flex align-items-center">
                <i class="bi @(statusType == "success" ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                <span>@TempData["StatusMessage"]</span>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Report Filter Controls -->
    <div class="card dashboard-card mb-4">
        <div class="card-header">
            <h5><i class="bi bi-funnel me-2"></i>Report Filters</h5>
        </div>
        <div class="card-body">
            <form method="get" id="reportFilterForm">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Report Type</label>
                        <select asp-for="ReportType" class="form-select">
                            <option value="Overview" selected>System Overview</option>
                            <option value="Facilities">Facility Usage & Bookings</option>
                            <option value="Services">Service Requests & Performance</option>
                            <option value="Users">User Activity & Registration</option>
                            <option value="Financial">Financial Summary</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Date Range</label>
                        <select asp-for="DateRange" class="form-select" id="dateRangeSelect">
                            <option value="7days">Last 7 Days</option>
                            <option value="30days" selected>Last 30 Days</option>
                            <option value="90days">Last 90 Days</option>
                            <option value="year">Last 12 Months</option>
                            <option value="custom">Custom Range</option>
                        </select>
                    </div>
                    <div class="col-md-3 custom-date-field">
                        <label class="form-label">Start Date</label>
                        <input type="date" asp-for="StartDate" class="form-control" />
                    </div>
                    <div class="col-md-3 custom-date-field">
                        <label class="form-label">End Date</label>
                        <input type="date" asp-for="EndDate" class="form-control" />
                    </div>
                    <div class="col-12 text-end">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-funnel"></i> Apply Filters
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div id="reportContainer" class="report-container">
        <!-- Report Header -->
        <div class="report-header mb-4">
            <div class="row">
                <div class="col-md-8">
                    <h2 class="report-title">@Model.ReportTitle</h2>
                    <p class="text-muted">@Model.ReportDescription</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <div class="report-meta">
                        <div><strong>Generated:</strong> @DateTime.Now.ToString("MMMM dd, yyyy hh:mm tt")</div>
                        <div><strong>Period:</strong> @Model.ReportPeriod</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading indicator for reports -->
        <div id="reportLoadingIndicator" class="text-center my-5" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading report data...</p>
        </div>

        <!-- Error message container -->
        <div id="reportErrorContainer" class="alert alert-danger" style="display: none;">
            <div class="d-flex align-items-center">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <span id="reportErrorMessage">Unable to load report data. Please try again.</span>
            </div>
        </div>

        <!-- Key Metrics Summary Cards -->
        <div class="row stats-cards">
            @foreach (var metric in Model.KeyMetrics)
            {
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-card-content">
                            <div class="stat-card-title">@metric.Name</div>
                            <div class="stat-card-value">@metric.Value</div>
                            @if (!string.IsNullOrEmpty(metric.Change))
                            {
                                <div class="stat-card-change @(metric.IsPositive ? "positive" : "negative")">
                                    <i class="bi @(metric.IsPositive ? "bi-arrow-up-right" : "bi-arrow-down-right")"></i>
                                    @metric.Change
                                </div>
                            }
                        </div>
                        <div class="stat-card-icon @metric.IconClass">
                            <i class="bi @metric.Icon"></i>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Primary Charts Row -->
        <div class="row mt-4">
            <div class="col-md-8">
                <div class="card dashboard-card chart-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>@Model.PrimaryChartTitle</h5>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" id="primaryChartPeriodBtn">
                                Last 30 Days
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item period-selector" href="#" data-chart="primary" data-period="7">Last 7 Days</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="primary" data-period="30">Last 30 Days</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="primary" data-period="90">Last 90 Days</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body chart-container">
                        <canvas id="primaryChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card dashboard-card chart-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>@Model.SecondaryChartTitle</h5>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" id="secondaryChartPeriodBtn">
                                Current Period
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item period-selector" href="#" data-chart="secondary" data-period="week">This Week</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="secondary" data-period="month">This Month</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="secondary" data-period="quarter">This Quarter</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body chart-container">
                        <canvas id="secondaryChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Data Table -->
        <div class="card dashboard-card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="bi bi-table me-2"></i>@Model.DataTableTitle</h5>
                <button class="btn btn-sm btn-outline-primary" id="exportTableBtn">
                    <i class="bi bi-download"></i> Export Data
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-hover report-table">
                    <thead>
                        <tr>
                            @foreach (var header in Model.TableHeaders)
                            {
                                <th>@header</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.TableData)
                        {
                            <tr>
                                @foreach (var cell in row)
                                {
                                    <td>@cell</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Additional Charts Row -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card dashboard-card chart-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="bi bi-bar-chart-line me-2"></i>@Model.AdditionalChart1Title</h5>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" id="additionalChart1PeriodBtn">
                                Last 30 Days
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item period-selector" href="#" data-chart="additional1" data-period="month">This Month</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="additional1" data-period="quarter">This Quarter</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="additional1" data-period="year">This Year</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body chart-container">
                        <canvas id="additionalChart1"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card dashboard-card chart-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="bi bi-pie-chart-fill me-2"></i>@Model.AdditionalChart2Title</h5>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" id="additionalChart2PeriodBtn">
                                Current Period
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item period-selector" href="#" data-chart="additional2" data-period="month">This Month</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="additional2" data-period="quarter">This Quarter</a></li>
                                <li><a class="dropdown-item period-selector" href="#" data-chart="additional2" data-period="year">This Year</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body chart-container">
                        <canvas id="additionalChart2"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistical Summaries -->
        <div class="row mt-4">
            @foreach (var stat in Model.Statistics)
            {
                <div class="col-md-4 mb-3">
                    <div class="stat-item">
                        <h6 class="stat-label">@stat.Label</h6>
                        <p class="stat-value">@stat.Value</p>
                    </div>
                </div>
            }
        </div>

        <!-- Insights and Recommendations -->
        <div class="card dashboard-card mt-4">
            <div class="card-header">
                <h5><i class="bi bi-lightbulb me-2"></i>Insights & Recommendations</h5>
            </div>
            <div class="card-body">
                <div class="insights-content">
                    @foreach (var insight in Model.Insights)
                    {
                        <div class="insight-item mb-3">
                            <h6 class="insight-title">
                                <i class="bi @insight.Icon me-2"></i>
                                @insight.Title
                            </h6>
                            <p class="insight-text">@insight.Text</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #4e6e4d;
        --primary-dark: #3d5a3c;
        --primary-light: rgba(78, 110, 77, 0.1);
        --primary-lighter: rgba(78, 110, 77, 0.05);
        --text-light: #f8f9fa;
        --text-dark: #333;
        --text-muted: #6c757d;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --info-color: #17a2b8;
        --body-bg: #f9f9f9;
    }

    body {
        background-color: var(--body-bg);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Navbar styling */
    .navbar {
        background-color: var(--primary-color) !important;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
        padding: 0.75rem 0;
        transition: all 0.3s ease;
    }

    /* Dashboard container */
    .dashboard-container {
        margin-top: 5rem;
        padding-bottom: 2rem;
    }

    .dashboard-welcome {
        padding: 1.5rem 0;
        border-bottom: 1px solid rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }

    .welcome-title {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .welcome-subtitle {
        color: var(--text-muted);
        font-size: 1.1rem;
    }

    /* Stats Cards */
    .stats-cards {
        margin-bottom: 1.5rem;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        padding: 1.25rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
        height: 100%;
    }

    .stat-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
    }

    .stat-card-content {
        z-index: 1;
    }

    .stat-card-title {
        font-size: 0.9rem;
        color: var(--text-muted);
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .stat-card-value {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.5rem;
    }

    .stat-card-change {
        font-size: 0.8rem;
        display: flex;
        align-items: center;
    }

    .stat-card-change.positive {
        color: var(--success-color);
    }

    .stat-card-change.negative {
        color: var(--danger-color);
    }

    .stat-card-icon {
        font-size: 2rem;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        color: white;
    }

    .user-icon, .bg-users {
        background-color: #4299e1;
    }

    .service-icon, .bg-services {
        background-color: #48bb78;
    }

    .approval-icon, .bg-bookings {
        background-color: #ed8936;
    }

    .revenue-icon, .bg-revenue {
        background-color: #805ad5;
    }

    /* Dashboard cards */
    .dashboard-card {
        height: 100%;
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

    .dashboard-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
    }

    .dashboard-card .card-header {
        background-color: white;
        border-bottom: 1px solid rgba(0,0,0,0.05);
        padding: 1rem 1.25rem;
    }

    .dashboard-card .card-header h5 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: var(--primary-color);
        display: flex;
        align-items: center;
    }

    /* Chart Cards */
    .chart-card {
        margin-bottom: 1.5rem;
    }

    .chart-card .card-header {
        background-color: white;
        border-bottom: 1px solid rgba(0,0,0,0.05);
        padding: 1rem 1.25rem;
    }

    .chart-card .dropdown-toggle {
        background: transparent;
        color: var(--text-muted);
        border: 1px solid rgba(0,0,0,0.1);
        font-size: 0.85rem;
    }

    .chart-card .dropdown-toggle:hover {
        background-color: var(--primary-lighter);
        color: var(--primary-color);
    }

    .chart-container {
        position: relative;
        height: 280px;
        overflow: hidden;
    }

    /* Report header */
    .report-header {
        padding: 1.5rem;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }

    .report-title {
        color: var(--primary-color);
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .report-meta {
        color: var(--text-muted);
        font-size: 0.9rem;
    }

    /* Data table */
    .report-table thead th {
        background-color: #f8f9fa;
        color: #4a5568;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 1px solid rgba(0,0,0,0.05);
        padding: 0.85rem 1.25rem;
    }

    .report-table tbody tr {
        transition: all 0.2s ease;
    }

    .report-table tbody tr:hover {
        background-color: rgba(78, 110, 77, 0.03);
    }

    /* Statistics items */
    .stat-item {
        background-color: white;
        border-radius: 10px;
        padding: 1.25rem;
        height: 100%;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

    .stat-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
    }

    .stat-label {
        color: var(--text-muted);
        margin-bottom: 0.75rem;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 0;
    }

    /* Insights */
    .insight-title {
        font-weight: 600;
        color: var (--primary-dark);
        display: flex;
        align-items: center;
    }

    .insight-text {
        color: var(--text-muted);
        margin-left: 2rem;
    }

    /* Button styling */
    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background-color: var(--primary-dark);
        border-color: var(--primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(78, 110, 77, 0.3);
    }

    .btn-outline-primary {
        color: var(--primary-color);
        border-color: var(--primary-color);
        transition: all 0.3s ease;
    }

    .btn-outline-primary:hover {
        background-color: var(--primary-dark);
        border-color: var(--primary-dark);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(78, 110, 77, 0.3);
    }

    .btn-outline-secondary {
        color: var(--text-muted);
        border-color: #dee2e6;
        transition: all 0.3s ease;
    }

    .btn-outline-secondary:hover {
        background-color: #f8f9fa;
        color: var(--primary-color);
        border-color: var(--primary-color);
    }

    /* Export actions */
    .export-actions {
        display: flex;
        gap: 0.5rem;
    }

    /* Filter toggles */
    .custom-date-field {
        display: none;
    }
</style>

<!-- Separate print stylesheet to avoid media query issues -->
<style media="print">
    body {
        background-color: white !important;
        -webkit-print-color-adjust: exact !important;
        print-color-adjust: exact !important;
        color-adjust: exact !important;
    }
    
    .navbar, .dashboard-welcome button, .btn, form, .export-actions {
        display: none !important;
    }
    
    .dashboard-container {
        margin-top: 0 !important;
        width: 100% !important;
        padding: 0 !important;
    }
    
    .card {
        break-inside: avoid;
        page-break-inside: avoid;
        border: 1px solid rgba(0,0,0,0.1) !important;
        box-shadow: none !important;
        margin-bottom: 20px !important;
    }
    
    .dashboard-card:hover {
        transform: none !important;
        box-shadow: none !important;
    }
    
    .chart-container {
        height: auto !important;
        min-height: 250px;
        page-break-inside: avoid;
    }
    
    .col-md-3, .col-md-4, .col-md-6, .col-md-8 {
        width: 100% !important;
        flex: 0 0 100% !important;
        max-width: 100% !important;
    }
    
    .row {
        display: block !important;
        margin-bottom: 20px !important;
    }
    
    .report-header {
        margin-top: 20px !important;
    }
    
    .stat-card, .chart-card, .stat-item {
        page-break-inside: avoid !important;
        break-inside: avoid !important;
    }
    
    .stats-section {
        display: block;
        page-break-before: auto;
        page-break-after: always;
    }
    
    .primary-charts-section {
        display: block;
        page-break-before: always;
        page-break-after: always;
    }
    
    .table-section {
        display: block;
        page-break-before: always;
        page-break-after: always;
    }
    
    .additional-charts-section {
        display: block;
        page-break-before: always;
        page-break-after: always;
    }
    
    .statistics-section {
        display: block;
        page-break-before: always;
        page-break-after: always;
    }
    
    .insights-section {
        display: block;
        page-break-before: always;
    }
    
    h1, h2, h3, h4, h5, h6 {
        page-break-after: avoid !important;
    }
    
    table {
        page-break-inside: auto !important;
    }
    
    tr {
        page-break-inside: avoid !important;
        page-break-after: auto !important;
    }
    
    .welcome-subtitle {
        margin-bottom: 0 !important;
    }
    
    /* Hide elements not needed in print */
    .dropdown, .dropdown-toggle, .btn-sm, .btn-outline-primary {
        display: none !important;
    }
    
    /* Ensure the charts print properly */
    canvas {
        max-width: 100% !important;
        height: auto !important;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Set chart defaults to match theme
        Chart.defaults.color = '#6c757d';
        Chart.defaults.font.family = "'Segoe UI', 'Helvetica Neue', 'Arial', sans-serif";
        
        // Store chart instances for later reference
        const chartInstances = {};
        
        // Show loading indicator while preparing report data
        const loadingIndicator = document.getElementById('reportLoadingIndicator');
        const errorContainer = document.getElementById('reportErrorContainer');
        
        if (loadingIndicator) loadingIndicator.style.display = 'block';
        if (errorContainer) errorContainer.style.display = 'none';

        // Define fallback data for charts in case server data is incomplete
        const fallbackChartData = {
            primary: {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    datasets: [
                        {
                            label: 'Service Requests',
                            data: [65, 59, 80, 81, 56, 55, 40, 45, 60, 70, 75, 80],
                            borderColor: '#4e6e4d',
                            backgroundColor: 'rgba(78, 110, 77, 0.1)',
                            fill: true,
                            tension: 0.4
                        },
                        {
                            label: 'Facility Bookings',
                            data: [28, 48, 40, 19, 86, 27, 90, 85, 72, 80, 65, 75],
                            borderColor: '#ed8936',
                            backgroundColor: 'rgba(237, 137, 54, 0.1)',
                            fill: true,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            },
            secondary: {
                type: 'doughnut',
                data: {
                    labels: ['Completed', 'In Progress', 'Pending', 'Cancelled'],
                    datasets: [{
                        data: [65, 20, 10, 5],
                        backgroundColor: ['#4e6e4d', '#4299e1', '#ed8936', '#e53e3e'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            },
            additional1: {
                type: 'bar',
                data: {
                    labels: ['Gym', 'Swimming Pool', 'Tennis Court', 'Community Hall', 'Game Room', 'Garden'],
                    datasets: [{
                        label: 'Total Hours Booked',
                        data: [120, 150, 80, 200, 75, 40],
                        backgroundColor: 'rgba(78, 110, 77, 0.7)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            },
            additional2: {
                type: 'pie',
                data: {
                    labels: ['Maintenance', 'Plumbing', 'Electrical', 'Cleaning', 'Security', 'Other'],
                    datasets: [{
                        data: [35, 20, 15, 10, 15, 5],
                        backgroundColor: [
                            '#4e6e4d', '#4299e1', '#ed8936', 
                            '#805ad5', '#48bb78', '#e53e3e'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            }
        };
        
        // Try to get chart data from server model or use fallback
        try {
            // Initialize Chart.js configurations - check if model data exists first
            let primaryChartData, secondaryChartData, additionalChart1Data, additionalChart2Data;
            
            try {
                primaryChartData = @Html.Raw(Json.Serialize(Model.PrimaryChartData)) || fallbackChartData.primary;
                secondaryChartData = @Html.Raw(Json.Serialize(Model.SecondaryChartData)) || fallbackChartData.secondary;
                additionalChart1Data = @Html.Raw(Json.Serialize(Model.AdditionalChart1Data)) || fallbackChartData.additional1;
                additionalChart2Data = @Html.Raw(Json.Serialize(Model.AdditionalChart2Data)) || fallbackChartData.additional2;
            } catch (e) {
                console.warn("Error parsing chart data from server:", e);
                // Use fallback data if server data is invalid
                primaryChartData = fallbackChartData.primary;
                secondaryChartData = fallbackChartData.secondary;
                additionalChart1Data = fallbackChartData.additional1;
                additionalChart2Data = fallbackChartData.additional2;
            }
            
            // Check chart data validity and use fallback if needed
            if (!primaryChartData || !primaryChartData.data || !primaryChartData.data.datasets) {
                primaryChartData = fallbackChartData.primary;
            }
            
            if (!secondaryChartData || !secondaryChartData.data || !secondaryChartData.data.datasets) {
                secondaryChartData = fallbackChartData.secondary;
            }
            
            if (!additionalChart1Data || !additionalChart1Data.data || !additionalChart1Data.data.datasets) {
                additionalChart1Data = fallbackChartData.additional1;
            }
            
            if (!additionalChart2Data || !additionalChart2Data.data || !additionalChart2Data.data.datasets) {
                additionalChart2Data = fallbackChartData.additional2;
            }
            
            // Primary chart initialization
            const primaryChartCtx = document.getElementById('primaryChart');
            if (primaryChartCtx) {
                chartInstances.primaryChart = new Chart(primaryChartCtx, {
                    type: primaryChartData.type || 'line',
                    data: primaryChartData.data,
                    options: {
                        ...primaryChartData.options,
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1000,
                            onComplete: function() {
                                primaryChartCtx.setAttribute('data-rendered', 'true');
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                align: 'end',
                                labels: {
                                    boxWidth: 12,
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                padding: 10,
                                cornerRadius: 6,
                                titleFont: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    drawBorder: false,
                                    color: 'rgba(0,0,0,0.05)'
                                },
                                ticks: {
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    font: {
                                        size: 11
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Secondary chart initialization
            const secondaryChartCtx = document.getElementById('secondaryChart');
            if (secondaryChartCtx) {
                chartInstances.secondaryChart = new Chart(secondaryChartCtx, {
                    type: secondaryChartData.type || 'doughnut',
                    data: secondaryChartData.data,
                    options: {
                        ...secondaryChartData.options,
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1000,
                            onComplete: function() {
                                secondaryChartCtx.setAttribute('data-rendered', 'true');
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    boxWidth: 12,
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                padding: 10,
                                cornerRadius: 6
                            }
                        }
                    }
                });
            }

            // Additional charts
            const additionalChart1Ctx = document.getElementById('additionalChart1');
            if (additionalChart1Ctx) {
                chartInstances.additionalChart1 = new Chart(additionalChart1Ctx, {
                    type: additionalChart1Data.type || 'bar',
                    data: additionalChart1Data.data,
                    options: {
                        ...additionalChart1Data.options,
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1000,
                            onComplete: function() {
                                additionalChart1Ctx.setAttribute('data-rendered', 'true');
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    drawBorder: false,
                                    color: 'rgba(0,0,0,0.05)'
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                padding: 10,
                                cornerRadius: 6
                            }
                        }
                    }
                });
            }

            const additionalChart2Ctx = document.getElementById('additionalChart2');
            if (additionalChart2Ctx) {
                chartInstances.additionalChart2 = new Chart(additionalChart2Ctx, {
                    type: additionalChart2Data.type || 'pie',
                    data: additionalChart2Data.data,
                    options: {
                        ...additionalChart2Data.options,
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1000,
                            onComplete: function() {
                                additionalChart2Ctx.setAttribute('data-rendered', 'true');
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    boxWidth: 12,
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                padding: 10,
                                cornerRadius: 6
                            }
                        }
                    }
                });
            }
            
            // Hide loading indicator when charts are ready
            if (loadingIndicator) loadingIndicator.style.display = 'none';
            
        } catch (error) {
            console.error("Error initializing charts:", error);
            
            // Show error message and hide loading indicator
            if (loadingIndicator) loadingIndicator.style.display = 'none';
            if (errorContainer) {
                document.getElementById('reportErrorMessage').textContent = 'Error loading report data: ' + error.message;
                errorContainer.style.display = 'block';
            }
            
            // Try to initialize with fallback data
            initializeFallbackCharts();
        }
        
        // Initialize charts with fallback data if server data fails
        function initializeFallbackCharts() {
            try {
                ['primaryChart', 'secondaryChart', 'additionalChart1', 'additionalChart2'].forEach((chartId, index) => {
                    const chartTypes = ['primary', 'secondary', 'additional1', 'additional2'];
                    const chartCtx = document.getElementById(chartId);
                    if (chartCtx) {
                        const fallbackData = fallbackChartData[chartTypes[index]];
                        chartInstances[chartId] = new Chart(chartCtx, {
                            type: fallbackData.type,
                            data: fallbackData.data,
                            options: {
                                ...fallbackData.options,
                                responsive: true,
                                maintainAspectRatio: false,
                                animation: {
                                    duration: 1000,
                                    onComplete: function() {
                                        chartCtx.setAttribute('data-rendered', 'true');
                                    }
                                }
                            }
                        });
                    }
                });
            } catch (e) {
                console.error("Failed to initialize fallback charts:", e);
            }
        }

        // Handle period selection for charts
        document.querySelectorAll('.period-selector').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const chartType = this.getAttribute('data-chart');
                const period = this.getAttribute('data-period');
                const buttonText = this.textContent;
                
                // Update button text
                const buttonId = chartType + 'ChartPeriodBtn';
                document.getElementById(buttonId).textContent = buttonText;
                
                // Update chart data based on period
                updateChartForPeriod(chartType, period);
            });
        });
        
        // Function to update chart data based on selected period
        function updateChartForPeriod(chartType, period) {
            // Show loading indicator while updating
            if (loadingIndicator) loadingIndicator.style.display = 'block';
            
            // Simulate API call with timeout
            setTimeout(() => {
                try {
                    let newData;
                    
                    switch(chartType) {
                        case 'primary':
                            // Generate dynamic data based on period
                            newData = generatePrimaryChartData(period);
                            if (chartInstances.primaryChart) {
                                chartInstances.primaryChart.data = newData;
                                chartInstances.primaryChart.update();
                            }
                            break;
                            
                        case 'secondary':
                            newData = generateSecondaryChartData(period);
                            if (chartInstances.secondaryChart) {
                                chartInstances.secondaryChart.data = newData;
                                chartInstances.secondaryChart.update();
                            }
                            break;
                            
                        case 'additional1':
                            newData = generateAdditionalChart1Data(period);
                            if (chartInstances.additionalChart1) {
                                chartInstances.additionalChart1.data = newData;
                                chartInstances.additionalChart1.update();
                            }
                            break;
                            
                        case 'additional2':
                            newData = generateAdditionalChart2Data(period);
                            if (chartInstances.additionalChart2) {
                                chartInstances.additionalChart2.data = newData;
                                chartInstances.additionalChart2.update();
                            }
                            break;
                    }
                    
                    // Hide loading indicator when done updating
                    if (loadingIndicator) loadingIndicator.style.display = 'none';
                    
                } catch (error) {
                    console.error(`Error updating ${chartType} chart:`, error);
                    if (loadingIndicator) loadingIndicator.style.display = 'none';
                    if (errorContainer) {
                        document.getElementById('reportErrorMessage').textContent = 'Error updating chart data: ' + error.message;
                        errorContainer.style.display = 'block';
                        
                        // Hide error after 3 seconds
                        setTimeout(() => {
                            errorContainer.style.display = 'none';
                        }, 3000);
                    }
                }
            }, 600); // Simulate loading delay
        }
        
        // Generate dynamic data for primary chart based on selected period
        function generatePrimaryChartData(period) {
            let labels, dataset1, dataset2;
            
            switch(period) {
                case '7':
                    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
                    dataset1 = [12, 19, 8, 15, 10, 5, 7];
                    dataset2 = [7, 11, 5, 8, 12, 17, 10];
                    break;
                case '90':
                    labels = Array.from({length: 12}, (_, i) => `Week ${i+1}`);
                    dataset1 = [45, 52, 38, 24, 33, 26, 21, 20, 30, 40, 35, 48];
                    dataset2 = [30, 25, 22, 18, 25, 33, 35, 42, 38, 35, 30, 25];
                    break;
                default: // 30 days
                    labels = Array.from({length: 30}, (_, i) => `Day ${i+1}`);
                    dataset1 = Array.from({length: 30}, () => Math.floor(Math.random() * 40) + 10);
                    dataset2 = Array.from({length: 30}, () => Math.floor(Math.random() * 40) + 10);
                    break;
            }
            
            return {
                labels: labels,
                datasets: [
                    {
                        label: 'Service Requests',
                        data: dataset1,
                        borderColor: '#4e6e4d',
                        backgroundColor: 'rgba(78, 110, 77, 0.1)',
                        fill: true,
                        tension: 0.4
                    },
                    {
                        label: 'Facility Bookings',
                        data: dataset2,
                        borderColor: '#ed8936',
                        backgroundColor: 'rgba(237, 137, 54, 0.1)',
                        fill: true,
                        tension: 0.4
                    }
                ]
            };
        }
        
        // Generate dynamic data for secondary chart based on selected period
        function generateSecondaryChartData(period) {
            let data;
            
            switch(period) {
                case 'week':
                    data = [70, 15, 10, 5];
                    break;
                case 'quarter':
                    data = [55, 25, 10, 10];
                    break;
                default: // month
                    data = [65, 20, 10, 5];
                    break;
            }
            
            return {
                labels: ['Completed', 'In Progress', 'Pending', 'Cancelled'],
                datasets: [{
                    data: data,
                    backgroundColor: ['#4e6e4d', '#4299e1', '#ed8936', '#e53e3e'],
                    borderWidth: 1
                }]
            };
        }
        
        // Generate dynamic data for additional chart 1 based on selected period
        function generateAdditionalChart1Data(period) {
            let data;
            
            switch(period) {
                case 'quarter':
                    data = [380, 450, 240, 500, 320, 150];
                    break;
                case 'year':
                    data = [1200, 1800, 950, 2400, 1100, 600];
                    break;
                default: // month
                    data = [120, 150, 80, 200, 75, 40];
                    break;
            }
            
            return {
                labels: ['Gym', 'Swimming Pool', 'Tennis Court', 'Community Hall', 'Game Room', 'Garden'],
                datasets: [{
                    label: 'Total Hours Booked',
                    data: data,
                    backgroundColor: 'rgba(78, 110, 77, 0.7)'
                }]
            };
        }
        
        // Generate dynamic data for additional chart 2 based on selected period
        function generateAdditionalChart2Data(period) {
            let data;
            
            switch(period) {
                case 'quarter':
                    data = [40, 25, 10, 10, 10, 5];
                    break;
                case 'year':
                    data = [30, 20, 20, 15, 10, 5];
                    break;
                default: // month
                    data = [35, 20, 15, 10, 15, 5];
                    break;
            }
            
            return {
                labels: ['Maintenance', 'Plumbing', 'Electrical', 'Cleaning', 'Security', 'Other'],
                datasets: [{
                    data: data,
                    backgroundColor: [
                        '#4e6e4d', '#4299e1', '#ed8936', 
                        '#805ad5', '#48bb78', '#e53e3e'
                    ]
                }]
            };
        }

        // Print functionality
        document.getElementById('printReportBtn').addEventListener('click', function() {
            // Wait for charts to render and prepare for printing
            waitForChartRendering().then(() => {
                // Add section classes for better printing
                addPrintSectionClasses();
                
                // Force redraw of charts for better print quality
                Object.values(chartInstances).forEach(chart => {
                    if (chart && typeof chart.render === 'function') {
                        chart.render();
                    }
                });
                
                // Give charts time to redraw before printing
                setTimeout(() => {
                    window.print();
                    // Remove classes after printing is done or canceled
                    setTimeout(removePrintSectionClasses, 1000);
                }, 500);
            });
        });

        // PDF export functionality
        document.getElementById('downloadPdfBtn').addEventListener('click', function() {
            // Show loading indicator
            showLoadingIndicator();
            
            // Wait for charts to render
            waitForChartRendering().then(() => {
                // Add section classes for PDF layout
                addPrintSectionClasses();
                
                // Force redraw of charts for better quality
                Object.values(chartInstances).forEach(chart => {
                    if (chart && typeof chart.render === 'function') {
                        chart.render();
                    }
                });
                
                // Give charts time to redraw
                setTimeout(() => {
                    generatePDF();
                }, 500);
            });
        });

        // Export table data
        document.getElementById('exportTableBtn').addEventListener('click', function() {
            exportTableToCSV('report_data.csv');
        });
        
        // Export table to CSV
        function exportTableToCSV(filename) {
            const table = document.querySelector('.report-table');
            if (!table) return;
            
            let csv = [];
            const rows = table.querySelectorAll('tr');
            
            for (let i = 0; i < rows.length; i++) {
                const row = [], cols = rows[i].querySelectorAll('td, th');
                
                for (let j = 0; j < cols.length; j++) {
                    // Escape special characters, wrap in quotes
                    let text = cols[j].innerText;
                    text = text.replace(/"/g, '""'); // escape quotes
                    row.push('"' + text + '"');
                }
                
                csv.push(row.join(','));
            }
            
            // Download CSV file
            downloadCSV(csv.join('\n'), filename);
        }
        
        function downloadCSV(csv, filename) {
            const csvFile = new Blob([csv], {type: "text/csv"});
            const downloadLink = document.createElement("a");
            
            // Create a link to download
            downloadLink.download = filename;
            downloadLink.href = window.URL.createObjectURL(csvFile);
            downloadLink.style.display = "none";
            
            // Add to DOM, trigger click event, and remove
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }

        // Function to wait for all charts to render
        function waitForChartRendering() {
            return new Promise(resolve => {
                // Check if charts are rendered
                const checkIfRendered = () => {
                    const charts = ['primaryChart', 'secondaryChart', 'additionalChart1', 'additionalChart2'];
                    const allRendered = charts.every(chartId => {
                        const canvas = document.getElementById(chartId);
                        return canvas && (canvas.getAttribute('data-rendered') === 'true' || 
                               document.readyState === 'complete');
                    });
                    
                    if (allRendered) {
                        resolve();
                    } else {
                        setTimeout(checkIfRendered, 100);
                    }
                };
                
                checkIfRendered();
            });
        }
        
        // Function to generate PDF
        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const report = document.getElementById('reportContainer');
            const reportTitle = document.querySelector('.report-title').textContent;
            const fileName = `${reportTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.pdf`;
            
            // Add section classes for better PDF layout
            addPrintSectionClasses();
            
            // Create PDF with larger dimensions to improve quality
            const pdf = new jsPDF({
                orientation: 'portrait',
                unit: 'mm',
                format: 'a4',
                compress: true
            });
            
            // Add title to PDF
            pdf.setFontSize(16);
            pdf.setTextColor(78, 110, 77); // primary color
            pdf.text(reportTitle, 105, 20, { align: 'center' });
            
            // Use html2canvas with higher scale for better quality
            const options = {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                scrollX: 0,
                scrollY: 0,
                backgroundColor: '#ffffff'
            };
            
            html2canvas(report, options).then(canvas => {
                // Add report capture to PDF
                addImageToPDF(pdf, canvas);
                
                // Save PDF
                pdf.save(fileName);
                
                // Hide loading indicator
                hideLoadingIndicator();
                
                // Remove section classes
                removePrintSectionClasses();
            }).catch(error => {
                console.error('Error generating PDF:', error);
                hideLoadingIndicator();
                alert('There was a problem generating the PDF. Please try again.');
                removePrintSectionClasses();
            });
        }
        
        // Function to add image to PDF with paging
        function addImageToPDF(pdf, canvas) {
            const imgData = canvas.toDataURL('image/png');
            const imgWidth = 210 - 20; // A4 width in mm - margins
            const pageHeight = 297 - 20; // A4 height in mm - margins
            const imgHeight = (canvas.height * imgWidth) / canvas.width;
            let heightLeft = imgHeight;
            let position = 10; // starting position
            let pageCount = 0;
            
            // Add first page
            pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
            heightLeft -= pageHeight - 30; // adjust for title space on first page
            pageCount++;
            
            // Add new pages as needed
            while (heightLeft > 0) {
                pageCount++;
                position = -(pageHeight * pageCount) + 10; // New position for next page
                pdf.addPage();
                pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
            }
        }
        
        // Add section classes for better printing
        function addPrintSectionClasses() {
            try {
                // Add class to main sections for page breaks
                const statsCards = document.querySelector('.row.stats-cards');
                if (statsCards) {
                    const statsRow = statsCards.closest('.row');
                    if (statsRow) statsRow.classList.add('stats-section');
                }
                
                const primaryChart = document.querySelector('.col-md-8 .chart-card');
                if (primaryChart) {
                    const chartsRow = primaryChart.closest('.row');
                    if (chartsRow) chartsRow.classList.add('primary-charts-section');
                }
                
                const tableSection = document.querySelector('.table-responsive');
                if (tableSection) {
                    const tableCard = tableSection.closest('.card');
                    if (tableCard) tableCard.classList.add('table-section');
                }
                
                const additionalChart = document.querySelector('#additionalChart1');
                if (additionalChart) {
                    const addChartsRow = additionalChart.closest('.row');
                    if (addChartsRow) addChartsRow.classList.add('additional-charts-section');
                }
                
                const statItem = document.querySelector('.stat-item');
                if (statItem) {
                    const statsRow = statItem.closest('.row');
                    if (statsRow) statsRow.classList.add('statistics-section');
                }
                
                const insights = document.querySelector('.insights-content');
                if (insights) {
                    const insightsCard = insights.closest('.card');
                    if (insightsCard) insightsCard.classList.add('insights-section');
                }
            } catch (error) {
                console.error('Error adding print classes:', error);
            }
        }
        
        // Remove section classes
        function removePrintSectionClasses() {
            try {
                const sections = document.querySelectorAll(
                    '.stats-section, .primary-charts-section, .table-section, ' +
                    '.additional-charts-section, .statistics-section, .insights-section'
                );
                sections.forEach(section => {
                    section.classList.remove(
                        'stats-section', 'primary-charts-section', 'table-section',
                        'additional-charts-section', 'statistics-section', 'insights-section'
                    );
                });
            } catch (error) {
                console.error('Error removing print classes:', error);
            }
        }
        
        // Show loading indicator
        function showLoadingIndicator() {
            // Create loading overlay
            const overlay = document.createElement('div');
            overlay.id = 'loadingOverlay';
            overlay.style.position = 'fixed';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.width = '100%';
            overlay.style.height = '100%';
            overlay.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
            overlay.style.display = 'flex';
            overlay.style.justifyContent = 'center';
            overlay.style.alignItems = 'center';
            overlay.style.zIndex = '9999';
            
            const spinner = document.createElement('div');
            spinner.classList.add('spinner-border', 'text-primary');
            spinner.setAttribute('role', 'status');
            spinner.style.width = '3rem';
            spinner.style.height = '3rem';
            
            const message = document.createElement('div');
            message.textContent = 'Generating PDF...';
            message.style.marginLeft = '1rem';
            message.style.fontWeight = '500';
            message.style.color = '#4e6e4d';
            
            const content = document.createElement('div');
            content.style.display = 'flex';
            content.style.alignItems = 'center';
            content.appendChild(spinner);
            content.appendChild(message);
            
            overlay.appendChild(content);
            document.body.appendChild(overlay);
        }
        
        // Hide loading indicator
        function hideLoadingIndicator() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                document.body.removeChild(overlay);
            }
        }

        // Date range selection handling
        document.getElementById('dateRangeSelect').addEventListener('change', function() {
            const customDateFields = document.querySelectorAll('.custom-date-field');

            if (this.value === 'custom') {
                customDateFields.forEach(field => field.style.display = 'block');
            } else {
                customDateFields.forEach(field => field.style.display = 'none');
            }
        });

        // Trigger the change event to set initial visibility
        const dateRangeEvent = new Event('change');
        document.getElementById('dateRangeSelect').dispatchEvent(dateRangeEvent);

        // Hide custom date fields by default if not in custom mode
        if (document.getElementById('dateRangeSelect').value !== 'custom') {
            document.querySelectorAll('.custom-date-field').forEach(field => {
                field.style.display = 'none';
            });
        }
    });
</script>