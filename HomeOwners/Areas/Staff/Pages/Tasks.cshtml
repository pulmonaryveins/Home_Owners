@page
@using HomeOwners.Models
@model HomeOwners.Areas.Staff.Pages.TasksModel
@{
    ViewData["Title"] = "Staff Tasks";
}

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<link rel="stylesheet" href="~/css/nav.css" asp-append-version="true" />

<nav class="navbar navbar-expand-lg fixed-top">
    <div class="container">
        <!-- Logo -->
        <a class="navbar-brand" asp-area="Staff" asp-page="/Dashboard">
            <span class="brand-text">STAFF DASHBOARD</span>
        </a>

        <!-- Mobile Toggle Button -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarNav" aria-controls="navbarNav"
                aria-expanded="false" aria-label="Toggle navigation">
            <i class="bi bi-list text-white"></i>
        </button>

        <!-- Navigation Items -->
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mx-auto">
                <li class="nav-item">
                    <a class="nav-link" asp-area="Staff" asp-page="/Dashboard">
                        Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="Staff" asp-page="/Users">
                        Users
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" asp-area="Staff" asp-page="/Tasks">
                        Tasks
                    </a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Services
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/Services">Manage Services</a></li>
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/ServiceRequests">Service Request</a></li>
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/ServicePersonnel">Service Personnel</a></li>
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Facilities
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/Facilities">Manage Facilities</a></li>
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/BookingRequests">Booking Requests</a></li>
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        Announcements
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/Announcement">Manage Announcement</a></li>
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/Calendar">Manage Events</a></li>
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/ManageForum">Manage Forum</a></li>
                        <li><a class="dropdown-item" asp-area="Staff" asp-page="/ManagePolls">Manage Polls</a></li>
                    </ul>
                </li>
            </ul>

            <!-- Profile Menu -->
            <div class="nav-items-right">
                <div class="nav-item dropdown profile-menu">
                    <a class="profile-link dropdown-toggle" href="#" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="profile-avatar">
                            <i class="bi bi-person-fill"></i>
                        </div>
                    </a>
                    <ul class="dropdown-menu profile-dropdown dropdown-menu-end">
                        <li class="dropdown-header">
                            <div class="user-info">
                                <span class="user-name">@(User.Identity?.Name ?? "Admin")</span>
                                <span class="user-role">Staff Personnel</span>
                            </div>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" asp-area="Staff" asp-page="/Profile">
                                <i class="bi bi-person-gear"></i> Profile Settings
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout"
                                  asp-route-returnUrl="@Url.Page("/Account/Login", new { area = "Identity" })" method="post">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="dropdown-item logout-item">
                                    <i class="bi bi-box-arrow-right"></i> Logout
                                </button>
                            </form>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</nav>

<div class="container dashboard-container">
    <!-- Page Header -->
    <div class="row align-items-center mb-4">
        <div class="col">
            <h1 class="page-title">
                <i class="bi bi-list-check me-2"></i>Tasks Management
            </h1>
            <p class="text-muted">Create, manage, and track tasks for staff members</p>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTaskModal">
                <i class="bi bi-plus-circle me-2"></i>New Task
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        var statusClass = Model.StatusType == "Success" ? "success" : "danger";
        var statusIcon = Model.StatusType == "Success" ? "check-circle" : "exclamation-triangle";
        <div class="alert alert-@statusClass alert-dismissible fade show" role="alert">
            <div class="d-flex align-items-center">
                <i class="bi bi-@statusIcon me-2"></i> @Model.StatusMessage
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Task Progress Bar -->
    @{
        int totalTasks = Model.Tasks.Count + Model.CompletedTasks.Count;
        int completedTasks = Model.CompletedTasks.Count;
        double completionPercentage = totalTasks > 0 ? (double)completedTasks / totalTasks * 100 : 0;
    }
    <div class="task-progress-container mb-4">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div class="task-stats">
                <span class="fw-medium">Task Progress</span>
                <span class="text-muted ms-2">(@completedTasks of @totalTasks tasks completed)</span>
            </div>
            <div class="completion-percentage">
                <span class="badge rounded-pill">@completionPercentage.ToString("0")%</span>
            </div>
        </div>
        <div class="progress" style="height: 8px;">
            <div class="progress-bar" role="progressbar" 
                 style="width: @completionPercentage%;" 
                 aria-valuenow="@completionPercentage" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>

    <!-- Tasks Filter Tabs -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white py-3">
            <ul class="nav nav-pills card-header-pills" id="taskTabs">
                <li class="nav-item">
                    <a class="nav-link @(Request.Query["filter"] != "completed" && Request.Query["filter"] != "active" ? "active" : "")"
                       asp-page="./Tasks">
                       <i class="bi bi-grid-3x3-gap me-2"></i>All Tasks
                       <span class="badge ms-1">@totalTasks</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Request.Query["filter"] == "active" ? "active" : "")"
                       asp-page="./Tasks" asp-route-filter="active">
                       <i class="bi bi-hourglass-split me-2"></i>Active Tasks
                       <span class="badge ms-1">@Model.Tasks.Count(t => !t.IsComplete)</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Request.Query["filter"] == "completed" ? "active" : "")"
                       asp-page="./Tasks" asp-route-filter="completed">
                       <i class="bi bi-check2-all me-2"></i>Completed Tasks
                       <span class="badge ms-1">@completedTasks</span>
                    </a>
                </li>
            </ul>
        </div>
        
        <!-- Priority Filter -->
        <div class="card-body border-bottom">
            <div class="d-flex flex-wrap gap-2">
                <button class="btn btn-sm btn-outline-secondary filter-btn active" data-priority="all">
                    All Priorities
                </button>
                <button class="btn btn-sm btn-outline-success filter-btn" data-priority="low">
                    <i class="bi bi-flag me-1"></i>Low
                </button>
                <button class="btn btn-sm btn-outline-info filter-btn" data-priority="medium">
                    <i class="bi bi-flag-fill me-1"></i>Medium
                </button>
                <button class="btn btn-sm btn-outline-warning filter-btn" data-priority="high">
                    <i class="bi bi-flag-fill me-1"></i>High
                </button>
                <button class="btn btn-sm btn-outline-danger filter-btn" data-priority="urgent">
                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Urgent
                </button>
            </div>
        </div>
    </div>
    
    <!-- Active Tasks -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="bi bi-hourglass-split me-2"></i>Active Tasks
            </h5>
            <span class="badge bg-primary rounded-pill">@Model.Tasks.Count(t => !t.IsComplete)</span>
        </div>
        <div class="card-body">
            @if (Model.Tasks.Any(t => !t.IsComplete))
            {
                <div class="task-list-container">
                    @{
                        var groupedTasks = Model.Tasks.Where(t => !t.IsComplete)
                            .OrderByDescending(t => t.Priority)
                            .ThenBy(t => t.DueDate)
                            .GroupBy(t => {
                                var dueDate = t.DueDate.Date;
                                var today = DateTime.Now.Date;
                                var daysDiff = (dueDate - today).TotalDays;
                                
                                if (daysDiff < 0) return "Overdue";
                                if (daysDiff == 0) return "Today";
                                if (daysDiff == 1) return "Tomorrow";
                                if (daysDiff < 7) return "This Week";
                                return "Later";
                            });
                    }
                    
                    @foreach (var group in groupedTasks)
                    {
                        <div class="task-group mb-3">
                            <div class="task-group-title">
                                @{
                                    string iconClass = group.Key switch {
                                        "Overdue" => "bi-exclamation-octagon text-danger",
                                        "Today" => "bi-calendar-event text-warning",
                                        "Tomorrow" => "bi-calendar-day text-primary",
                                        "This Week" => "bi-calendar-week text-info",
                                        _ => "bi-calendar text-muted"
                                    };
                                }
                                <i class="bi @iconClass me-2"></i>@group.Key
                                <span class="badge bg-secondary rounded-pill ms-2">@group.Count()</span>
                            </div>
                            
                            @foreach (var task in group)
                            {
                                string priorityClass = task.Priority switch {
                                    TaskPriority.Low => "task-priority-low",
                                    TaskPriority.Medium => "task-priority-medium",
                                    TaskPriority.High => "task-priority-high",
                                    TaskPriority.Urgent => "task-priority-urgent",
                                    _ => "task-priority-default"
                                };
                                
                                string priorityIcon = task.Priority switch {
                                    TaskPriority.Low => "bi-flag",
                                    TaskPriority.Medium => "bi-flag-fill",
                                    TaskPriority.High => "bi-flag-fill",
                                    TaskPriority.Urgent => "bi-exclamation-triangle-fill",
                                    _ => "bi-dash-circle"
                                };

                                string priorityBadgeClass = task.Priority switch {
                                    TaskPriority.Low => "success",
                                    TaskPriority.Medium => "info",
                                    TaskPriority.High => "warning",
                                    TaskPriority.Urgent => "danger",
                                    _ => "secondary"
                                };
                                
                                <div class="task-item @priorityClass" data-priority="@task.Priority.ToString().ToLower()">
                                    <div class="task-status">
                                        <form method="post" asp-page-handler="ToggleCompletion" asp-route-id="@task.Id" class="task-checkbox-form">
                                            <div class="form-check">
                                                <input class="form-check-input task-checkbox" 
                                                       type="checkbox" 
                                                       id="task-@task.Id" 
                                                       @(task.IsComplete ? "checked" : "")>
                                                <label class="form-check-label" for="task-@task.Id"></label>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="task-content">
                                        <div class="task-title">@task.Title</div>
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <div class="task-description">@task.Description</div>
                                        }
                                        <div class="task-meta">
                                            <span class="task-priority">
                                                <span class="status-badge @priorityBadgeClass">
                                                    <i class="bi @priorityIcon"></i> @task.Priority
                                                </span>
                                            </span>
                                            <span class="task-due-date">
                                                <i class="bi bi-calendar3"></i> @task.DueDate.ToString("MMM d, yyyy")
                                            </span>
                                        </div>
                                    </div>
                                    <div class="task-actions">
                                        <button type="button" class="btn btn-sm btn-light edit-task-btn"
                                                data-id="@task.Id"
                                                data-title="@task.Title"
                                                data-description="@task.Description"
                                                data-priority="@((int)task.Priority)"
                                                data-due-date="@task.DueDate.ToString("yyyy-MM-dd")"
                                                data-bs-toggle="modal" data-bs-target="#editTaskModal">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <form method="post" asp-page-handler="Delete" asp-route-id="@task.Id" class="d-inline">
                                            <button type="submit" class="btn btn-sm btn-light delete-task-btn"
                                                    onclick="return confirm('Are you sure you want to delete this task?')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-check-circle"></i>
                    </div>
                    <h4>All caught up!</h4>
                    <p class="text-muted">You have no active tasks at the moment.</p>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTaskModal">
                        <i class="bi bi-plus-circle me-2"></i>Create a new task
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- Completed Tasks -->
    @if (Model.CompletedTasks.Any() && Request.Query["filter"] != "active")
    {
        <div class="card shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-check2-all me-2"></i>Completed Tasks
                    <span class="badge bg-success rounded-pill ms-2">@Model.CompletedTasks.Count</span>
                </h5>
                <button class="btn btn-sm btn-link collapse-btn" type="button"
                        data-bs-toggle="collapse" data-bs-target="#completedTasksCollapse"
                        aria-expanded="false" aria-controls="completedTasksCollapse">
                    <i class="bi bi-chevron-down"></i>
                </button>
            </div>
            <div class="collapse" id="completedTasksCollapse">
                <div class="card-body">
                    <div class="task-list-container">
                        @foreach (var task in Model.CompletedTasks)
                        {
                            <div class="task-item task-completed" data-priority="@task.Priority.ToString().ToLower()">
                                <div class="task-status">
                                    <form method="post" asp-page-handler="ToggleCompletion" asp-route-id="@task.Id" class="task-checkbox-form">
                                        <div class="form-check">
                                            <input class="form-check-input task-checkbox" 
                                                   type="checkbox" 
                                                   id="task-completed-@task.Id" 
                                                   checked>
                                            <label class="form-check-label" for="task-completed-@task.Id"></label>
                                        </div>
                                    </form>
                                </div>
                                <div class="task-content">
                                    <div class="task-title">@task.Title</div>
                                    @if (!string.IsNullOrEmpty(task.Description))
                                    {
                                        <div class="task-description">@task.Description</div>
                                    }
                                    <div class="task-meta">
                                        <span class="task-completion-date">
                                            <i class="bi bi-check-circle"></i> Completed on @(task.CompletedDate?.ToString("MMM d, yyyy") ?? "N/A")
                                        </span>
                                    </div>
                                </div>
                                <div class="task-actions">
                                    <form method="post" asp-page-handler="Delete" asp-route-id="@task.Id" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-light delete-task-btn"
                                                onclick="return confirm('Are you sure you want to delete this task?')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Request.Query["filter"] == "completed")
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-clipboard-x"></i>
                    </div>
                    <h4>No completed tasks</h4>
                    <p class="text-muted">You haven't completed any tasks yet.</p>
                    <a asp-page="./Tasks" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-2"></i>Back to all tasks
                    </a>
                </div>
            </div>
        </div>
    }
</div>

<!-- Create Task Modal -->
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateTask">
                <div class="modal-header">
                    <h5 class="modal-title" id="createTaskModalLabel">Create New Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="Title" class="form-label">Title <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="Title" name="NewTask.Title" required
                               maxlength="100" placeholder="Enter task title">
                    </div>
                    <div class="mb-3">
                        <label for="Description" class="form-label">Description</label>
                        <textarea class="form-control" id="Description" name="NewTask.Description" rows="3"
                                  maxlength="500" placeholder="Enter task description"></textarea>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label for="Priority" class="form-label">Priority <span class="text-danger">*</span></label>
                            <select class="form-select" id="Priority" name="NewTask.Priority" required>
                                <option value="0">Low</option>
                                <option value="1">Medium</option>
                                <option value="2" selected>High</option>
                                <option value="3">Urgent</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="DueDate" class="form-label">Due Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="DueDate" name="NewTask.DueDate" required
                                   value="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Task</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Task Modal -->
<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="editTaskForm" method="post" asp-page-handler="EditTask">
                <input type="hidden" id="editTaskId" name="id">
                <div class="modal-header">
                    <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editTitle" class="form-label">Title <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="editTitle" name="Task.Title" required
                               maxlength="100">
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editDescription" name="Task.Description" rows="3"
                                  maxlength="500"></textarea>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label for="editPriority" class="form-label">Priority <span class="text-danger">*</span></label>
                            <select class="form-select" id="editPriority" name="Task.Priority" required>
                                <option value="0">Low</option>
                                <option value="1">Medium</option>
                                <option value="2">High</option>
                                <option value="3">Urgent</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="editDueDate" class="form-label">Due Date <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="editDueDate" name="Task.DueDate" required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #4e6e4d;
        --primary-dark: #3d5a3c;
        --primary-light: rgba(78, 110, 77, 0.1);
        --primary-lighter: rgba(78, 110, 77, 0.05);
        --text-light: #f8f9fa;
        --text-dark: #333;
        --text-muted: #6c757d;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --info-color: #17a2b8;
        --body-bg: #f9f9f9;
        
        --priority-low: #28a745;
        --priority-medium: #17a2b8;
        --priority-high: #ffc107;
        --priority-urgent: #dc3545;
    }

    body {
        background-color: var(--body-bg);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Dashboard container */
    .dashboard-container {
        margin-top: 5rem;
        padding-bottom: 2rem;
    }

    /* Page title */
    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    /* Card customization */
    .card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05) !important;
        margin-bottom: 1.5rem;
        overflow: hidden;
    }

    .card-header {
        border-bottom: 1px solid rgba(0,0,0,0.05);
        padding: 1rem 1.25rem;
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
        display: flex;
        align-items: center;
    }

    /* Nav pills customization */
    .nav-pills .nav-link {
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        font-weight: 500;
        color: #6c757d;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
    }

    .nav-pills .nav-link:hover {
        background-color: rgba(78, 110, 77, 0.05);
    }

    .nav-pills .nav-link.active {
        background-color: #4e6e4d;
        color: white;
        box-shadow: 0 4px 10px rgba(78, 110, 77, 0.3);
    }

    .nav-pills .badge {
        font-weight: 500;
        font-size: 0.7rem;
    }

    /* Task checkbox */
    .task-checkbox {
        cursor: pointer;
        width: 20px;
        height: 20px;
    }

    /* Badges */
    .badge {
        padding: 0.35em 0.65em;
        font-weight: 500;
    }

    .completion-percentage .badge {
        background-color: var(--success-color);
        font-weight: 600;
        font-size: 0.9rem;
    }

    /* Profile menu */
    .profile-menu {
        position: relative;
    }

    /* Buttons */
    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        transition: all 0.3s ease;
    }

    .btn-primary:hover, .btn-primary:active, .btn-primary:focus {
        background-color: var(--primary-dark) !important;
        border-color: var(--primary-dark) !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(78, 110, 77, 0.3);
    }

    .btn-outline-primary {
        color: var(--primary-color);
        border-color: var(--primary-color);
        transition: all 0.3s ease;
    }

    .btn-outline-primary:hover {
        background-color: var(--primary-light);
        color: var(--primary-dark);
        border-color: var(--primary-dark);
    }

    /* New Task List Design */
    .task-list-container {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .task-group-title {
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--text-dark);
        padding: 0.75rem 1rem;
        margin-bottom: 0.5rem;
        background-color: rgba(0,0,0,0.02);
        border-radius: 8px;
        display: flex;
        align-items: center;
    }

    .task-item {
        display: flex;
        align-items: flex-start;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        padding: 1rem;
        transition: all 0.2s ease;
        position: relative;
        border: 1px solid rgba(0,0,0,0.05);
    }

    .task-item:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    .task-priority-low {
        
    }

    .task-priority-medium {
   
    }

    .task-priority-high {
        
    }

    .task-priority-urgent {
        
    }

    .task-status {
        margin-right: 0.75rem;
    }

    .task-checkbox-form .form-check {
        margin: 0;
        padding: 0;
    }

    .task-content {
        flex: 1;
        min-width: 0; /* Helps with text ellipsis */
    }

    .task-title {
        font-weight: 500;
        color: var(--text-dark);
        margin-bottom: 0.25rem;
    }

    .task-description {
        font-size: 0.875rem;
        color: var(--text-muted);
        margin-bottom: 0.5rem;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .task-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        font-size: 0.75rem;
        color: var(--text-muted);
        align-items: center;
    }

    .task-due-date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .task-completion-date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        color: var(--success-color);
    }

    .task-actions {
        display: flex;
        gap: 0.25rem;
        margin-left: 0.75rem;
    }

    .delete-task-btn:hover {
        color: var(--danger-color);
    }

    .edit-task-btn:hover {
        color: var(--primary-color);
    }

    /* Status Badges */
    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.4rem;
        padding: 0.35rem 0.75rem;
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 500;
        white-space: nowrap;
    }

    .status-badge.success {
        background-color: rgba(40, 167, 69, 0.15);
        color: #28a745;
    }

    .status-badge.info {
        background-color: rgba(23, 162, 184, 0.15);
        color: #17a2b8;
    }

    .status-badge.warning {
        background-color: rgba(255, 193, 7, 0.15);
        color: #ffc107;
    }

    .status-badge.danger {
        background-color: rgba(220, 53, 69, 0.15);
        color: #dc3545;
    }
    
    .status-badge.secondary {
        background-color: rgba(108, 117, 125, 0.15);
        color: #6c757d;
    }

    /* Completed task style */
    .task-completed {
        background-color: rgba(248, 249, 250, 0.5);
        
    }

    .task-completed .task-title {
        color: var(--text-muted);
        text-decoration: line-through;
    }

    .task-completed .task-description {
        color: var (--text-muted);
        opacity: 0.7;
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }

    .empty-state-icon {
        font-size: 3rem;
        color: var(--primary-color);
        opacity: 0.5;
        margin-bottom: 1.5rem;
    }

    .empty-state h4 {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .empty-state p {
        max-width: 300px;
        margin: 0 auto 1.5rem;
    }

    /* Collapse button */
    .collapse-btn {
        color: var(--text-muted);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .collapse-btn:hover {
        color: var(--primary-color);
        background-color: var(--primary-lighter);
    }

    /* Priority filter */
    .filter-btn {
        border-radius: 50px;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        transition: all 0.2s ease;
    }

    .filter-btn.active {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .filter-btn:hover:not(.active) {
        transform: translateY(-1px);
    }

    /* Task progress bar */
    .task-progress-container {
        background-color: white;
        padding: 1rem;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        margin-bottom: 1.5rem;
    }

    .task-stats {
        font-size: 0.9rem;
    }

    .completion-percentage .badge {
        font-size: 0.85rem;
    }

    .progress {
        border-radius: 10px;
        background-color: rgba(0,0,0,0.05);
        overflow: hidden;
    }

    .progress-bar {
        background-color: var(--success-color);
    }
    
    /* Custom checkbox styling */
    .task-checkbox {
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .task-checkbox:checked {
        background-color: var(--success-color);
        border-color: var(--success-color);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Edit task modal population
        const editButtons = document.querySelectorAll('.edit-task-btn');
        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                const title = this.getAttribute('data-title');
                const description = this.getAttribute('data-description');
                const priority = this.getAttribute('data-priority');
                const dueDate = this.getAttribute('data-due-date');

                document.getElementById('editTaskId').value = id;
                document.getElementById('editTitle').value = title;
                document.getElementById('editDescription').value = description || '';
                document.getElementById('editPriority').value = priority;
                document.getElementById('editDueDate').value = dueDate;
            });
        });

        // Add form validation for both modals
        const validateForm = function(form) {
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return false;
            }
            return true;
        };

        // Modal form submission handlers
        const createForm = document.querySelector('#createTaskModal form');
        createForm.addEventListener('submit', function(event) {
            if (!validateForm(this)) {
                event.preventDefault();
                event.stopPropagation();
            }
        });

        const editForm = document.querySelector('#editTaskModal form');
        editForm.addEventListener('submit', function(event) {
            if (!validateForm(this)) {
                event.preventDefault();
                event.stopPropagation();
            }
        });

        // Automatically open collapsed sections if they have content and we're viewing a filtered view
        const urlParams = new URLSearchParams(window.location.search);
        const filter = urlParams.get('filter');
        if (filter === 'completed') {
            const completedCollapse = document.getElementById('completedTasksCollapse');
            if (completedCollapse) {
                completedCollapse.classList.add('show');
            }
        }

        // Task checkbox handling with animation
        document.querySelectorAll('.task-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const taskItem = this.closest('.task-item');
                
                if (this.checked) {
                    taskItem.style.opacity = '0.6';
                    taskItem.style.transform = 'translateX(10px)';
                    
                    setTimeout(() => {
                        this.form.submit();
                    }, 300);
                } else {
                    this.form.submit();
                }
            });
        });

        // Priority filter functionality
        document.querySelectorAll('.filter-btn').forEach(button => {
            button.addEventListener('click', function() {
                // Update active button state
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                this.classList.add('active');
                
                const priority = this.getAttribute('data-priority');
                
                // Filter tasks
                document.querySelectorAll('.task-item').forEach(task => {
                    if (priority === 'all' || task.getAttribute('data-priority') === priority) {
                        task.style.display = 'flex';
                    } else {
                        task.style.display = 'none';
                    }
                });
                
                // Update task group visibility
                document.querySelectorAll('.task-group').forEach(group => {
                    const visibleTasks = Array.from(group.querySelectorAll('.task-item'))
                        .filter(task => task.style.display !== 'none');
                    
                    if (visibleTasks.length === 0) {
                        group.style.display = 'none';
                    } else {
                        group.style.display = 'block';
                    }
                });
            });
        });
    });
</script>